#include<iostream>
#include<cstdlib>
#include<conio.h>
#include<time.h>
#include<windows.h>
using namespace std;

#define Height 22
#define Width  46
#define DEF_TIMER 1234

class Player
{
public:
	int point;
	Player() :point(0){};
};
Player one;
Player two;
class Block
{
public:
	int x;
	int y;
	int speice;
	int player;
	int rotater=1;
	int bottom = 0;
	Block(int number)
	{
		randomSpecie();
		this->speice = 1;//仅是为了调试
		if (number == 1)
		{
			this->player = 1;
			this->x = 8;
			this->y = 20;
		}
		else
		{
			this->player = 2;
			this->x = 24;
			this->y =19;
		}
		this->rotater = 1;
	}
	void reSet();//重置两方块
	void randomSpecie();//生成随机的方块种类
};

inline void Block::randomSpecie()
{
	srand((unsigned int)time(NULL));
	this->speice = rand() % 5 + 1;
}
inline void Block::reSet()
{
	if (this->player == 1)
	{
		this->x = 2;
		this->y =0;
	}
	else
	{
		this->x = 24;
		this->y = 0;
	}
	this->bottom = 0;
	randomSpecie();
	this->speice = 3;//仅是为了调试
}

int map[Height][Width] = { 0 };//仍然是边界采用3正在下落的方块采用1着地的方块采用2
void hidden_cursor();//隐藏光标
void gotoxy(int x, int y);//移动光标
void paint();//渲染涂色为方块染色
void printBorder();//打印边界
void gameRun();//主游戏控制函数
void sportPoint();//展示玩家分数
void rePaint();//刷新非玩家方块界面
void search();//将玩家的方块覆盖实现刷新,仅针对正在下落的方块
void searchMap();//重新将被覆盖的方块实现出来
void blockSwitch(Block& who);//用于帮助方块分类
void SingleLine(Block& who);//直线方块
void Square(Block& who);//正方体
void StrangeSquare(Block& who);//Z字形
void MidStanding(Block& who);//凸字形
void LeftGreat(Block& who);//L字形
int BottomSentencer(Block& who);//测试使用的底部扫描机制观察是否可行
bool RightBlockScanner(Block& who);//初次测试仅对左边区域方块进行测试
bool LeftBlockScanner(Block& who);//仅对左边区域方块进行初步测试
void TurnItUpSideDown(Block& who);//旋转方块!
bool SingleLineRotate(Block& who);//检测是否能否旋转成功以及为调用函数为直线铺路
//void SpecialPaint(Block& who);//打印到底方块专用
void gotoxy(int x, int y)
{
	COORD coord;
	coord.X = x;
	coord.Y = y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
void paint()
{
	srand((unsigned int)time(NULL));
	int color = rand() % 7 + 1;
	switch (color)
	{
	case 0: color = 9; break;
	case 1:
	case 2: color = 12; break;
	case 3:
	case 4: color = 14; break;
	case 5: color = 10; break;
	case 6: color = 13; break;
	default: color = 7; break;
	}
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
}
void printBorder()
{
	for (int i = 0; i < 21; i++)
	{
		gotoxy(0, i);
		cout << "■";
		map[i][0] = 3;
		map[i][1] = 3;
	}
	for (int i = 0; i < 21; i++)
	{
		gotoxy(22, i);
		cout << "■";
		map[i][22] = 3;
		map[i][23] = 3;
	}
	for (int i = 0; i < 21; i++)
	{
		gotoxy(44, i);
		cout << "■";
		map[i][44] = 3;
		map[i][45] = 3;
	}
	for (int i = 0; i < 23; i++)
	{
		gotoxy(2 * i, 21);
		cout << "■";
	}
	for (int i = 0; i < 46; i++)
		map[21][i] = 3;
}
void gameRun()
{
	char receiver;
	int floor = 0;
	printBorder();//打印边界
	Block one(1);
	Block two(2);
	blockSwitch(one);//第一次生成方块
	int which = 1;
	blockSwitch(two);
	rePaint();//用于第一次生成方块后刷新界面
	while (1)
	{
		int flag = 0, flag_oneright = 0, flag_oneleft = 0;
		int flag_oneRotate = 0;//检测是否出现旋转
		int t = 25000;
	
		
		/*
		while (t>0)//自动下落控制速度
		{
			if (_kbhit() != 0)
			{
				flag = 1;
				break;
			}
			t--;
		}
		*/
		
			
		one.y++;
		//two.y++;
		//if (flag == 1)
		{
			receiver = _getch();
			switch (receiver)
			{
			case's':one.y += 1; break;
			case'd':one.x += 2; flag_oneright = 1; break;
			case'a':one.x -= 2; flag_oneleft = 1; break;
			case'w':TurnItUpSideDown(one); break;
			case 80:two.y += 1; break;
			default:break;
			}
		}
		int one_receiver = BottomSentencer(one);
		//int two_receiver = BottomSentencer(two);
		if (one_receiver)//BottomScanner(one))
		{
			one.bottom = 1;//如果到底了
			switch (one.speice)//检测one的方块种类底部检测仅需分为直线形和其它形状便可
			{
			case 1:one.y = one_receiver; break;//
			default:one.y = one_receiver - 1; break;
			}
			//one.y -= 1;//这里还未考虑旋转的加入
		}
		/*
		if (two_receiver)//BottomScanner(one))
		{
			two.bottom = 1;//如果到底了
			switch (two.speice)//检测one的方块种类底部检测仅需分为直线形和其它形状便可
			{
			case 1:two.y = two_receiver; break;//
			default:two.y = two_receiver - 1; break;
			}
			//one.y -= 1;//这里还未考虑旋转的加入
		}
		*/
		if (flag_oneright)
		{
			if (RightBlockScanner(one))
			{
				one.x -= 2;
			}
		}
		if (flag_oneleft)
		{
			if (LeftBlockScanner(one))
			{
				one.x += 2;
			}
		}
		search();//先刷新清空界面
		searchMap();
		blockSwitch(one);//后将变化过的方块处理给Switch函数进行分配
		//blockSwitch(two);
		rePaint();//重新打印分数以及重新将变化的方块展示出来
		if (one.bottom == 1)
		{
			one.reSet();
			one.bottom = 0;
			blockSwitch(one);
			searchMap();
			blockSwitch(one);//后将变化过的方块处理给Switch函数进行分配
		}
		/*
		if (two.bottom == 1)
		{
			two.reSet();
			two.bottom = 0;
			blockSwitch(two);
			searchMap();
			blockSwitch(two);//后将变化过的方块处理给Switch函数进行分配
		}
		*/
	}
	int a = 1;
}
void sportPoint()
{
	gotoxy(47, 0);
	cout << "玩家一分数" << endl;
	gotoxy(47, 1);
	cout << one.point;
	gotoxy(47, 3);
	cout << "玩家二分数" << endl;
	gotoxy(47, 4);
	cout << two.point;
}
void rePaint()
{
	sportPoint();
	searchMap();
}
void search()
{
	for (int i = 0; i < 22; i++)
		for (int j = 0; j < 46; j++)
			if (map[i][j] == 1)map[i][j] = 0;
}
void searchMap()
{
	for (int i = 0; i < 22; i++)
		for (int j = 0; j < 46; j++)
		{
			if (map[i][j] == 1 && !(j % 2))
			{
				gotoxy(j, i);
				paint();
				cout << "■";
			}
			if (map[i][j] == 0)
			{
				gotoxy(j, i);
				cout << " ";
			}
		}
}
void blockSwitch(Block& who)
{
	switch (who.speice)
	{
	case 1:SingleLine(who); return;
	case 2:Square(who); return;
	case 3:StrangeSquare(who); return;
	case 4:MidStanding(who); return;
	case 5:LeftGreat(who); return;
	}
}
void SingleLine(Block& who)
{
	if (who.rotater == 1)
	{
		if (!who.bottom)
		{
			for (int i = 0; i < 8; i++)
				map[who.y][who.x + i] = 1;
		}
		else
		{
			for (int i = 0; i < 8; i++)
				map[who.y][who.x + i] = 2;
			int flag = 1;
			for (int i = 0; i < 8; i++)
			{
				gotoxy(who.x + i, who.y);
				if (flag % 2)cout << "■";
				flag++;
			}
		}
	}
	else if (who.rotater==2)
	{
		if (!who.bottom)
		{
			for (int i = 0; i < 4; i++)
			{
				map[who.y - i][who.x] = 1;
				map[who.y - i][who.x + 1] = 1;
			}
		}
		else
		{
			for (int i = 0; i < 4; i++)
			{
				map[who.y - i][who.x] = 2;
				map[who.y - i][who.x + 1] = 2;
			}
			int flag = 1;
			for (int i = 0; i < 4; i++)
			{
				gotoxy(who.x, who.y - i);
				cout << "■";
			}
		}
	}
	else if (who.rotater == 3)
	{
		if (!who.bottom)
		{

		}
	}
}
void Square(Block& who)
{
	if (!who.bottom)
	{
		for (int i = 0; i < 4; i++)
			map[who.y][who.x + i] = 1;
		for (int i = 0; i < 4; i++)
			map[who.y + 1][who.x + i] = 1;
	}
	else
	{
		for (int i = 0; i < 4; i++)
			map[who.y][who.x + i] = 2;
		for (int i = 0; i < 4; i++)
			map[who.y + 1][who.x + i] = 2;
		int flag = 1;
		for (int i = 0; i < 4; i++)
		{
			gotoxy(who.x + i, who.y);
			if (flag % 2)cout << "■";
			flag++;
		}
		flag = 1;
		for (int i = 0; i < 4; i++)
		{
			gotoxy(who.x + i, who.y + 1);
			if (flag % 2)cout << "■";
			flag++;
		}
	}
}
void StrangeSquare(Block& who)
{
	if (!who.bottom)
	{
		for (int i = 0; i < 4; i++)
			map[who.y][who.x + i] = 1;
		for (int i = 0; i < 4; i++)
			map[who.y + 1][who.x + i + 2] = 1;
	}
	else
	{
		for (int i = 0; i < 4; i++)
			map[who.y][who.x + i] = 2;
		for (int i = 0; i < 4; i++)
			map[who.y + 1][who.x + i + 2] = 2;
		int flag = 1;
		for (int i = 0; i < 4; i++)
		{
			gotoxy(who.x + i, who.y);
			if (flag % 2)cout << "■";
			flag++;
		}
		flag = 1;
		for (int i = 0; i < 4; i++)
		{
			gotoxy(who.x + i + 2, who.y + 1);
			if (flag % 2)cout << "■";
			flag++;
		}
	}
}
void MidStanding(Block& who)
{
	if (!who.bottom)
	{
		for (int i = 0; i < 2; i++)
			map[who.y][who.x + i + 2] = 1;
		for (int i = 0; i < 6; i++)
			map[who.y + 1][who.x + i] = 1;
	}
	else
	{
		for (int i = 0; i < 2; i++)
			map[who.y][who.x + i + 2] = 2;
		for (int i = 0; i < 6; i++)
			map[who.y + 1][who.x + i] = 2;
		int flag = 1;
		for (int i = 0; i < 2; i++)
		{
			gotoxy(who.x + i + 2, who.y);
			if (flag % 2)cout << "■";
			flag++;
		}
		flag = 1;
		for (int i = 0; i < 6; i++)
		{
			gotoxy(who.x + i, who.y + 1);
			if (flag % 2)cout << "■";
			flag++;
		}
	}
}
void LeftGreat(Block& who)
{
	if (!who.bottom)
	{
		for (int i = 0; i < 2; i++)
			map[who.y][who.x + i] = 1;
		for (int i = 0; i < 6; i++)
			map[who.y + 1][who.x + i] = 1;
	}
	else
	{
		for (int i = 0; i < 2; i++)
			map[who.y][who.x + i] = 2;
		for (int i = 0; i < 6; i++)
			map[who.y + 1][who.x + i] = 2;
		int flag = 1;
		for (int i = 0; i < 2; i++)
		{
			gotoxy(who.x + i, who.y);
			if (flag % 2)cout << "■";
			flag++;
		}
		flag = 1;
		for (int i = 0; i < 6; i++)
		{
			gotoxy(who.x + i, who.y + 1);
			if (flag % 2)cout << "■";
			flag++;
		}
	}
}
int BottomSentencer(Block& who)
{
	if (who.player == 1)
	{
		for (int i = 20; i>=0 ; i--)
			for (int j = 0; j < 22; j++)
				if (map[i][j] == 1 && (map[i + 1][j] == 2 || map[i + 1][j] == 3))return i;
	}
	else
	{
		for (int i = 20; i >=0; i--)
			for (int j = 24; j < 44; j++)
				if (map[i][j] == 1 && (map[i + 1][j] == 2 || map[i + 1][j] == 3))return i;
	}
	return 0;
}
bool RightBlockScanner(Block& who)
{
	int right_max = -1;
	for (int i = 0; i < 20; i++)
	{
		for (int j = 0; j < 22; j++)
		{
			if (map[i][j] == 1 && j > right_max)right_max = j;
		}
	}
	if (right_max == 21)return true;
	return false;
}
bool LeftBlockScanner(Block& who)
{
	int left_min = 100000;
	for (int i = 0; i < 20; i++)
	{
		for (int j = 0; j < 22; j++)
		{
			if (map[i][j] == 1 && j < left_min)left_min = i;
		}
	}
	if (left_min == 2)return true;
	return false;
}
void TurnItUpSideDown(Block& who)
{
	switch (who.speice)
	{
	case 1:SingleLineRotate(who); who.rotater++; return;
	}
}
bool SingleLineRotate(Block& who)
{
	//如果能旋转首先调用search函数对于之前的状态刷新
	//刷新后配合blockSwitch函数对即将旋转的方块分配区域
	//在gameRun函数重新调用searchMap函数重新绘图
	if (who.rotater%4 == 1)
	{
		if (who.y < 5)return false;
		else//满足基本的条件
		{
			for (int i = who.y - 3; i < who.y; i++)
			{
				for (int j = who.x; j <=(who.x + 6); j++)
				{
					if (map[i][j] == 2 || map[i][j] == 3)return false;
				}
			}
		}
	}
	else if (who.rotater%4 == 2)
	{
		if (who.x < 8)return false;
		else
		{
			for (int i = who.y - 3; i <= who.y; i++)
			{
				for (int j = who.x - 6; j < who.x; j++)
				{
					if (map[i][j] == 2 || map[i][j] == 3)return false;
				}
			}
		}
	}
	else if (who.rotater%4 == 3)
	{
		if (who.y > 17)return false;
		else
		{
			for (int i = who.y + 1; i < who.y + 4; i++)
			{
				for (int j = who.x - 6; j < who.x; j++)
				{
					if (map[i][j] == 3 || map[i][j] == 2)return false;
				}
			}
		}
	}
	else
	{
		if (who.x > 14)return false;
		else
		{
			for (int i = who.y;i<who.y+4; i++)
			{
				for (int j = who.x + 2; j <= who.x + 6; j++)
				{
					if (map[i][j] == 3 || map[i][j] == 2)return false;
				}
			}
		}
	}
	return true;
}
void hidden_cursor()//隐藏光标
{
	HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);
	CONSOLE_CURSOR_INFO cci;
	GetConsoleCursorInfo(hOut, &cci);
	cci.bVisible = 0;//赋1为显示，赋0为隐藏
	SetConsoleCursorInfo(hOut, &cci);
}
int main()
{
	hidden_cursor();
	system("title 我罗斯");
	system("mode con cols=66 lines=22");
	gameRun();
	return 0;
}
void OnReturn(HWND hWnd)
{
	SetTimer(hWnd, DEF_TIMER, 1000, NULL);
}
/*
bool BottomScanner(Block& who)
{
	switch (who.speice)
	{
	case 1:if (LineScanner(who))return true; break;//针对直线形的可以直接通过获取
	case 2:if (SquareScanner(who))return true; break;//针对正方形可以不考虑旋转产生的影响这就对后续有帮助作用
	case 3:if (StrangeScanner(who))return true; break;//针对Z字形
	case 4:if (StandingScanner(who))return true; break;//针对凸字形
	case 5:if (LeftScanner(who))return true; break;//针对L字形
	}
	return false;
}
bool LineScanner(Block& who)
{
	for (int i = 0; i < 8; i++)//注意这里仅仅是针对非旋转状态下的直线的底部测试实际直线仅需两种状态
	{
		if (map[who.y][who.x + i] == 2 || map[who.y][who.x + i] == 3)
		{
			who.bottom = 1;
			return true;
		}
	}
	return false;
}
bool SquareScanner(Block& who)
{
	for (int i = 0; i < 4; i++)//由于正方形特殊形可以不用考虑旋转
	{
		if (map[who.y + 1][who.x + i] == 2 || map[who.y + 1][who.x + i] == 3)
		{
			who.bottom = 1;
			return true;
		}
	}
	return false;
}
bool StrangeScanner(Block& who)
{
	//未考虑旋转状态下的情况
	for (int i = 0; i < 2; i++)
	{
		if (map[who.y][who.x + i] == 2 || map[who.y][who.x + i] == 3)return true;
	}
	for (int i = 0; i < 4; i++)
	{
		if (map[who.y + 1][who.x + i + 2] == 2 || map[who.y + 1][who.x + i + 2] == 3)
		{
			who.bottom = 1;
			return true;
		}
	}
	return false;
}
bool StandingScanner(Block& who)
{
	for (int i = 0; i < 6; i++)
	{
		if (map[who.y + 1][who.x + i] == 2 || map[who.y + 1][who.x + i] == 3)
		{
			who.bottom = 1;
			return true;
		}
	}
	return false;
}
bool LeftScanner(Block& who)
{
	for (int i = 0; i < 6; i++)
	{
		if (map[who.y + 1][who.x + i] == 2 || map[who.y + 1][who.x + i] == 3)
		{
			who.bottom = 1;
			return true;
		}
	}
	return false;
}

*/
/*
bool BottomScanner(Block& who);//用于检测是否到达底部仅用于分类作用无其他作用
bool LineScanner(Block& who);//专门用来检测直线是否到达底部
bool SquareScanner(Block& who);//专门用来为检测正方形是否到达底部
bool StrangeScanner(Block& who);//专门用来检测Z字形是否到达底部
bool StandingScanner(Block& who);//专门用来检测凸字形是否到达底部
bool LeftScanner(Block& who);//专门用来检测L字形是否到达底部
*/
